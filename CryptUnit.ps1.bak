Function Average($array)
{
    $RunningTotal = 0;
    foreach($i in $array){
        $RunningTotal += $i
    }
    return ([decimal]($RunningTotal) / [decimal]($array.Length));
}

$NHPay = 0
$Divisor = 1000000000
$Hashrate = 1950
$NewPool = ""
$NewPay = 0
$LastPool = ""
$LastPay = 0
$CryptUnitHashMult = 1000
$NHCorrection = 0.95
$PercentageToChange = 1.1
$LoopDelay = 300
$NextInterval = 300

$Pools=@()
$Pools +=[pscustomobject]@{"coin" = "XTL";"pool" = "78.46.85.142:5222";"correction" = 0.8; "earnings" = @(); avgEarning = 0 };
$Pools +=[pscustomobject]@{"coin" = "GRFT";"pool" = "grft.easyhash.io:3831";"correction" = 0.85; "earnings" = @(); avgEarning = 0 };
$Pools +=[pscustomobject]@{"coin" = "ETN";"pool" = "pool.etn.spacepools.org:7777"; "correction" = 0.85; "earnings" = @(); avgEarning = 0 };
$Pools +=[pscustomobject]@{"coin" = "IPBC";"pool" = "support.ipbc.io:7777"; "correction" = 0.8; "earnings" = @(); avgEarning = 0 };

$session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
    
$cookie = New-Object System.Net.Cookie 
    
$cookie.Name = "userhashrate"
$cookie.Value = $Hashrate * $CryptUnitHashMult
$cookie.Domain = "www.cryptunit.com"

$session.Cookies.Add($cookie);

$DolarBTCvalue = 9000;

$FirstLoopExecution=$True   
$LoopStarttime=Get-Date

while(1 -eq 1) {
    #Call api to local currency conversion
    try {
        $CDKResponse = Invoke-WebRequest "https://api.coindesk.com/v1/bpi/currentprice.json" -UseBasicParsing -TimeoutSec 2 | ConvertFrom-Json | Select-Object -ExpandProperty BPI
        #writelog "Coindesk api was responsive.........." $logfile $true
	$DolarBTCvalue = [double]$CDKResponse.usd.rate
	Write-Host "Dollar/BTC: $DolarBTCvalue"
    } 
        
    catch {
        Write-Host "Coindesk api not responding, not possible/deactuallized local coin conversion.........."
        }


	try {
	    $Request = Invoke-WebRequest "https://api.nicehash.com/api?method=simplemultialgo.info" -UseBasicParsing -timeoutsec 10 | ConvertFrom-Json 
	    $Request = $Request |Select-Object -expand result |Select-Object -expand simplemultialgo | Where-Object {$_.algo -eq 22}

	    if ($Request -ne $null) {
		$NHPay = [double]($Request.paying) * $Hashrate / $Divisor * $DolarBTCvalue
		WRITE-HOST "Nicehash pays $NHPay"
	    }
	}
	catch {
		    WRITE-HOST 'Nicehash API NOT RESPONDING...'
	}

	try {
		$page = Invoke-WebRequest -Uri "https://www.cryptunit.com/?order=price" -WebSession $session -TimeoutSec 10
		$html = $page.Content 
		$regex2 = '(?s)\((\w+)\)<\/h3>.*?Daily earnings.*?([\d\.]+)<em>'
		$matches = $html | Select-String $regex2 -AllMatches | Select -Expand Matches 
		ForEach ($match in $matches) {
			$coin = $match.Groups[1].Value
			$earn = [double]($match.Groups[2].Value) / $CryptUnitHashMult
			$CoinPools = $Pools | Where-Object {$_.coin -eq $coin}
			if ($CoinPools -ne $null) {
				$CoinPools.earnings += [double] $earn
				if ($CoinPools.earnings.Count > 5) { $CoinPools.earnings = $CoinPools.earnings[1..4] }
				$CoinPools.avgEarning = Average($CoinPools.earnings)
				Write-Host $CoinPools
			}
		}
	}		
	catch {
		WRITE-HOST 'CryptUnit NOT RESPONDING...'
	}
	if ( $FirstLoopExecution -or ((Get-Date) -ge ($LoopStarttime.AddSeconds($NextInterval))) ) {
		try {
			$bestpool = $pools[0]
			ForEach ($CoinPools in $pools) {
				if ($CoinPools.avgEarning -gt $bestpool.avgEarning) { $bestpool = $CoinPools}
			}
		
			if (($bestpool.avgEarning * $bestpool.correction) -gt $NHPay * $NHCorrection) {
				$NewPool = $bestpool.pool
				$NewPay = $bestpool.avgEarning * $bestpool.correction
				#Write-Host $CoinPools.pool			
				$NextInterval = 600
			} else {
				$NewPool = "cryptonight.eu.nicehash.com:3355"
				$NewPay = $NHPay * $NHCorrection
				$NextInterval = 300
			}
			if ($NewPay -gt ($LastPay * $PercentageToChange) -and ($NewPool -ne $LastPool)) {
				Write-Host "New pool: $NewPool Pays (corrected): $NewPay"
				try {
					$Result = Invoke-WebRequest "http://192.168.1.3:4000/c?pool=$NewPool" -UseBasicParsing -TimeoutSec 10
					$LastPool = $NewPool
					$LastPay = $NewPay
					$LoopStarttime=Get-Date
				} catch {
					WRITE-HOST 'XMR-STAK NOT RESPONDING...'
				}
			} else {
				Write-Host "Keep old pool"
				$NextInterval = 300
			}
		}
		catch {
			WRITE-HOST 'Error setting new pool'
		}
	}
	$FirstLoopExecution=$False
	
	Start-Sleep $LoopDelay

}
